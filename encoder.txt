uint16_t getAngle(I2C_HandleTypeDef *hi2c1){  						// прописываем функцию для получения угла поворота
	uint8_t I2C_ADDRESS = 0x81; 							// I2C адрес устройства
	uint8_t I2C_TIMEOUT = 100;  							// время между передачами данных по I2C
	
	uint8_t regData[1];     							// массив, куда мы записываем данные с шины I2C
	uint8_t regAddress[2];  							// массив регистров устройства
	
	uint8_t low_byte  = 0; 								// младший байт
	uint8_t high_byte = 0; 								// старший байт
	uint16_t angle    = 0; 								// угол поворота
	
	// что происходит в блоках: нам нужно прочитать значение регистра ID, затем отправить команду с адресом самого датчика и адресом регистра,
	//значение которого мы хотим получить, и после этого снова выдать на линию адрес и встать на чтение
	
	regAddress[0] = 0xFE;								// нам нужно прочитать значение регистра ID, затем отправить команду
	HAL_I2C_Master_Transmit(hi2c1, I2C_ADDRESS, regAddress, 1, I2C_TIMEOUT);	// с адресом самого датчика и адресом регистра, значение которого
	HAL_I2C_Master_Receive(hi2c1, I2C_ADDRESS, regData, 1, I2C_TIMEOUT);		// мы хотим получить, и после этого снова выдать на линию адрес и встать на чтение
	low_byte = regData[0];
	
	regAddress[0] = 0xFF;
	HAL_I2C_Master_Transmit(hi2c1, I2C_ADDRESS, regAddress, 1, I2C_TIMEOUT);
	HAL_I2C_Master_Receive(hi2c1, I2C_ADDRESS, regData, 1, I2C_TIMEOUT);
	high_byte = regData[0];
	
	angle = ((uint16_t) high_byte << 6) | ((uint16_t) low_byte); 			// так как разрешение энкодера 14 бит, нам нужно преобразовать данные
											// (преобразование к типу uint16_t, побитовый сдвиг, сложение)
	
	return angle;
}
